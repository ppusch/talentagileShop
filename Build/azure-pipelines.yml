# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- develop

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.ArtifactStagingDirectory)\Web"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  displayName: Copy dacpac files to artifact staging directory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)'
    Contents: '**/*.dacpac'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/SQL'
    flattenFolders: true
    OverWrite: true

- task: CopyFiles@2
  displayName: Copy dacpac files to artifact staging directory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)'
    Contents: '**/TalentAgileShop.Database.publish.xml'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/SQL'
    flattenFolders: true
    OverWrite: true

- task: VSTest@2
  displayName: 'Run unit tests'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
        **\talentagileshop.cart.tests.dll
        !**\*TestAdapter.dll
        !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    codeCoverageEnabled : true
  continueOnError: true


- task: PowerShell@2
  displayName: Generate Coverage xml files
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Agent.TempDirectory)'
    script: |
            #install tools:
            &dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.12
            &dotnet tool install coverlet.console --tool-path . --version 1.4.1

            #`nmake reports dir:"
            mkdir .\reports

            #`nrun tests:"
            $unitTestFile = gci -Recurse | ?{ $_.FullName -like "*bin\*UnitTestProject2.dll" }
            Write-Host "`$unitTestFile value: $unitTestFile"

            $coverlet = "$pwd\coverlet.exe"

            #calling $coverlet for $($unitTestFile.FullName)"
            &$coverlet $unitTestFile.FullName --target "dotnet" --targetargs "vstest $($unitTestFile.FullName) --logger:trx" --format "cobertura"

            #`ngenerate report(s)"
            gci -Recurse | 
                ?{ $_.Name -eq "coverage.cobertura.xml" } | 
                %{ &"$pwd\reportgenerator.exe" "-reports:$($_.FullName)" "-targetdir:reports" "-reporttypes:HTMLInline;HTMLChart" }


# - task: PowerShell@2
#   displayName: Generate Coverage xml files
#   inputs:
#     targetType: 'inline'
#     workingDirectory: '$(Agent.TempDirectory)'
#     script: |
#               $ver = (Get-ChildItem $env:USERPROFILE\.nuget\packages\Microsoft.CodeCoverage | Select-Object -Property Name | Sort-Object -Descending | Select-Object -Last 1).Name
#               "Version='$ver'"
#               $PWD
#               Get-ChildItem -Recurse -Filter "*.coverage" | % {
#               $_.FullName
#               $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"
#               $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)
#               "Analyze '$($_.FullName)' with output '$output'..."
#               . $env:USERPROFILE\.nuget\packages\microsoft.codecoverage\$ver\build\netstandard1.0\CodeCoverage\CodeCoverage.exe analyze /output:$output $_.FullName
#               }
#               "Done"
#     errorActionPreference: 'continue'

# - script: reportgenerator -reports:$(Agent.TempDirectory)\**\*.coveragexml -targetdir:$(Build.SourcesDirectory)\Reports -reporttypes:"Cobertura;HTMLInline"
#   displayName: Create Code Coverage Reports


  # - task: PublishCodeCoverageResults@1
  #   inputs:
  #     codeCoverageTool: 'Cobertura'
  #     summaryFileLocation: 


- publish: $(Build.ArtifactStagingDirectory)/Web
  artifact: Website
  
- publish: $(Build.ArtifactStagingDirectory)/SQL
  artifact: SQL